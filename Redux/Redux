Managing state in large web apps, or even smaller ones with less complexity, can be quite difficult.

Redux:

A single centralized place to contain the global state in your application, and specific patterns to follow when updating that state to make the code predictable.

1. Store
   Our Redux app's state and reducers are stored in a object called store.

2. Reducer

The reducer is responsible for returning a new state, and it does so depending on the action that is passed to it.

The reducer is a function that takes the current state and an action object as inputs and outputs the new state

3. Action

The action instructs the reducer on what to do with the state, such as changing it to a value we pass into the reducer from the action

<!--
 The reducer is responsible for actually changing the state of the application, while the action is in charge of specifying how it should change -->

Actions in detail :

In Redux, actions are plain JavaScript objects that represent an intention to change the state of the application

Actions must have a type property that indicates the type of action being performed.
They can also have additional properties to carry any necessary data.

 <!-- addTodoAction is an action with a type of 'ADD_TODO' and a payload property containing the data for the new todo item. -->

<!--

const addTodoAction = {
  type: 'ADD_TODO',
  payload: {
    id: 1,
    text: 'Buy groceries',
    completed: false
  }

};


-->

<!-- Action creators  -->

Actions are typically created using action creator functions, which are functions that return action objects.

Action creators make it easier to create actions with dynamic data.

<!--
 function addTodo(id, text) {
  return {
    type: 'ADD_TODO',
    payload: {
      id,
      text,
      completed: false
    }
  };
}

// Usage
const newTodoAction = addTodo(2, 'Walk the dog'); -->

<!--

Once an action is created, it is dispatched to the Redux store using the dispatch function.
The store then forwards the action to the reducer, which is a pure function responsible for updating the state based on the action type. -->

Summary

In Redux, actions are sent to reducers through the dispatch function. When you call dispatch with an action, Redux sends that action to every reducer in your application.

Reducers are functions that specify how the application's state changes in response to actions. Each reducer typically handles a specific slice of the state tree. Reducers are pure functions, meaning they don't mutate the state directly; instead, they return a new state object based on the old state and the action.

https://media.geeksforgeeks.org/wp-content/uploads/20210706235837/reactreduxx.png

Redux Middlewares

Redux middleware is a powerful and flexible mechanism that allows you to extend the behavior of the Redux store's dispatch function. Middleware sits between the action being dispatched and the moment it reaches the reducer, providing a way to intercept, modify, or augment the actions and handle asynchronous operations.

const middleware = store => next => action => {
// Middleware logic here
next(action); // Pass the action to the next middleware or the reducer
};

Diagrams

https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow

https://camo.githubusercontent.com/79eb282f3949943c160f1851da08e069d082d618faf22fc4248f49dc88f36766/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6d656469612d702e736c69642e65732f75706c6f6164732f3336343831322f696d616765732f323438343739302f415243482d5265647578322d657874656e6465642d7265616c2d6465636c657261746976652e676966

https://github.com/reduxjs/redux/issues/653

//Order of Middlewares

const middleware1 = store => next => action => {
// Middleware 1 logic
next(action);
};

const middleware2 = store => next => action => {
// Middleware 2 logic
next(action);
};

const middleware3 = store => next => action => {
// Middleware 3 logic
next(action);
};

// Apply middleware to the store
const store = createStore(
rootReducer,
applyMiddleware(middleware1, middleware2, middleware3)
);

Top-Level Only: Hooks must be used at the top level of your functional components or custom hooks. They should not be called conditionally or inside loops.

// Valid
function MyComponent() {
const [count, setCount] = useState(0);
// ...

return (

<div>
{/_ ... _/}
</div>
);
}

// Invalid - Hooks must be at the top level
function InvalidComponent() {
if (condition) {
const [count, setCount] = useState(0); // Error!
}

return (

<div>
{/_ ... _/}
</div>
);
}







//When to use Context APIs vs When to use Redux


Context API: 

1. Simple State Propagation:
Use Context API when you have a simple application with a small to moderate-sized state that needs to be shared across components.

2.Component Tree Communication:
Context API is suitable when the state needs to be passed down through several levels of nested components without manually passing props at each level.

3.Global Theming:
Context API is great for scenarios like theming where global settings or preferences need to be accessed by various components

4. Static Configuration

When the state doesn't change frequently and doesn't involve complex logic or actions, Context API can be a lightweight solution.



Redux:

1. Complex State Management:

Redux is beneficial when you have a complex application with a large state that is updated frequently, involves complex logic, or requires various asynchronous operations.

2. Predictable State Changes:

Use Redux when you need a predictable state container, and actions are well-defined, making it easier to trace and debug state changes.


3. Middleware Operations:

If you need to perform middleware operations like logging, asynchronous API calls, or other side effects during state updates, Redux provides middleware support.


4.Large Teams Collaboration:

In larger teams where a centralized and standardized state management approach is crucial, Redux provides a clear structure and helps in enforcing patterns.


USecases : 

1.User Authentication: Context API

If your application requires managing the authentication state (e.g., user login/logout) across various components, Context API can be suitable. 
This is especially true if the authentication state is relatively straightforward and doesn't involve complex logic.


2. Form State Management:Redux 

When dealing with complex forms with dynamic sections, conditional rendering, and validation requirements, 
Redux can provide a structured way to manage the state and actions associated with form interactions.


3. Language Localization: Context APIs

When you need to handle language localization and want to make the selected language available to different parts of your application, 
Context API can efficiently propagate this global setting.



4. UI Theming:Context APIs

For scenarios where the application UI theme needs to be changed dynamically and accessed by different components,
 Context API is a good fit. This is useful for cases where you have light and dark theme options


 5.Settings Configuration : Context APIs

If your application has user-configurable settings (e.g., preferences, layout choices) that need to be accessed by multiple components,
 Context API can simplify the state management for such static configurations.


6.Real-Time Collaboration: Redux 

In collaborative applications where multiple users can make changes simultaneously (e.g., collaborative document editing), 
Redux can handle complex state synchronization and updates efficiently.

7. Application Cache:Redux

For applications that heavily rely on client-side caching and where the state needs to be managed with precise control over cache invalidation and updates, 
Redux provides a robust solution.


8.Interactive Data Visualizations:Redux

If your application involves interactive data visualizations, charts, or graphs with complex state and interactivity requirements,
 Redux can help manage the state changes associated with user interactions.





 Combined UseCases : 

Form State + UI Theming:
If your application has both complex form interactions and dynamic theming, 
you might use Redux for managing the form state and Context API for handling the global UI theme.


User Authentication + Real-Time Collaboration:

In applications that involve both user authentication and real-time collaboration features, 
you might use Context API for managing the user authentication state and Redux for handling the complex real-time collaboration state.






